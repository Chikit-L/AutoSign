import os
import requests
import hashlib
import base64

def download_and_save_file(local_path, remote_url):
    """下载并保存文件"""
    try:
        # 获取远程文件内容
        response = requests.get(remote_url)
        response.raise_for_status()
        remote_content = response.content
        
        # 确保目录存在
        os.makedirs(os.path.dirname(local_path), exist_ok=True)
        
        # 保存文件
        with open(local_path, 'wb') as f:
            f.write(remote_content)
        print(f"✅ 成功下载文件到: {local_path}")
        return True
    except Exception as e:
        print(f"❌ 下载文件失败 {local_path}: {str(e)}")
        return False

def check_and_update_file(local_path, remote_url):
    """检查并更新文件"""
    try:
        # 获取远程文件内容
        response = requests.get(remote_url)
        response.raise_for_status()
        remote_content = response.content
        
        # 如果本地文件不存在，直接下载
        if not os.path.exists(local_path):
            print(f"📥 文件不存在，开始下载: {local_path}")
            return download_and_save_file(local_path, remote_url)
        
        # 如果文件存在，比较内容
        with open(local_path, 'rb') as f:
            local_content = f.read()
            
        # 使用MD5比较文件内容
        if hashlib.md5(local_content).hexdigest() == hashlib.md5(remote_content).hexdigest():
            print(f"✓ 文件无需更新: {local_path}")
            return False
        else:
            print(f"🔄 文件需要更新: {local_path}")
            os.makedirs(os.path.dirname(local_path), exist_ok=True)
            with open(local_path, 'wb') as f:
                f.write(remote_content)
            print(f"✅ 文件已更新: {local_path}")
            return True
            
    except Exception as e:
        print(f"❌ 检查更新失败 {local_path}: {str(e)}")
        return False

def update_folder(local_path, remote_url):
    """更新整个文件夹"""
    try:
        # 解析 GitHub URL
        _, _, _, owner, repo, _, branch, *path = remote_url.split('/')
        path = '/'.join(path)
        
        # 构建 GitHub API URL
        api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}?ref={branch}"
        
        response = requests.get(api_url)
        response.raise_for_status()
        files = response.json()
        
        updated = False
        for file in files:
            if file['type'] == 'file':
                file_path = os.path.join(local_path, file['name'])
                if check_and_update_file(file_path, file['download_url']):
                    updated = True
            elif file['type'] == 'dir':
                subdir_path = os.path.join(local_path, file['name'])
                if update_folder(subdir_path, file['url']):
                    updated = True
        
        return updated
    except Exception as e:
        print(f"❌ 更新文件夹失败 {local_path}: {str(e)}")
        return False

# 设置输出状态（用于GitHub Actions）
def set_output(name, value):
    if 'GITHUB_OUTPUT' in os.environ:
        with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'{name}={value}', file=fh)

# 主要执行逻辑
files_to_update = [
    {"local_path": "ablesci.py", "remote_url": "https://raw.githubusercontent.com/chenlunTian/ablesciSign/main/ablesci.py"},
    {"local_path": "Quark/Quark.py", "remote_url": "https://raw.githubusercontent.com/BNDou/Auto_Check_In/main/checkIn_Quark.py"},
    {"local_path": "Quark/utils", "remote_url": "https://github.com/BNDou/Auto_Check_In/tree/main/utils"},
    {"local_path": "wps.js", "remote_url": "https://raw.githubusercontent.com/wf021325/qx/refs/heads/main/task/wps.js"},
    {"local_path": "jingdong/jd_OnceApply.js", "remote_url": "https://raw.githubusercontent.com/6dylan6/jdpro/refs/heads/main/jd_OnceApply.js"},
    {"local_path": "jingdong/jd_AutoEval.js", "remote_url": "https://raw.githubusercontent.com/6dylan6/jdpro/refs/heads/main/jd_AutoEval.js"},
    {"local_path": "jingdong/jdCookie.js", "remote_url": "https://raw.githubusercontent.com/6dylan6/jdpro/refs/heads/main/jdCookie.js"},
    {"local_path": "jingdong/function/dylano.js", "remote_url": "https://raw.githubusercontent.com/6dylan6/jdpro/refs/heads/main/function/dylano.js"},
    {"local_path": "jingdong/function/dylanx.js", "remote_url": "https://raw.githubusercontent.com/6dylan6/jdpro/refs/heads/main/function/dylanx.js"},
    {"local_path": "jingdong/USER_AGENTS.js", "remote_url": "https://raw.githubusercontent.com/6dylan6/jdpro/refs/heads/main/USER_AGENTS.js"},
    {"local_path": "follow.py", "remote_url": "https://raw.githubusercontent.com/AKA-Cigma/QLscripts/refs/heads/main/follow.py"}
]


def main():
    updated = False
    for item in files_to_update:
        try:
            if item['remote_url'].startswith('https://github.com') and '/tree/' in item['remote_url']:
                if update_folder(item['local_path'], item['remote_url']):
                    updated = True
            else:
                if check_and_update_file(item['local_path'], item['remote_url']):
                    updated = True
        except Exception as e:
            print(f"❌ 处理 {item['local_path']} 时出错: {str(e)}")
    
    # 设置 GitHub Actions 输出
    set_output('files_updated', str(updated).lower())
    return updated

if __name__ == "__main__":
    main()